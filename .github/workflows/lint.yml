name: Run Lint Checks

on:
  workflow_call:

  pull_request:
    branches:
      - '**'

  merge_group:
    types: [checks_requested]

jobs:
  run-swiftlint:
    name: Run SwiftLint
    runs-on: macos-14
    permissions:
      contents: read
      pull-requests: write
    steps:
    - name: Determine base and feature branches
      id: vars
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "BASE_BRANCH=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
            echo "FEATURE_BRANCH=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "merge_group" ]; then
            echo "BASE_BRANCH=${{ github.event.merge_group.base_ref }}" >> $GITHUB_OUTPUT
            echo "FEATURE_BRANCH=" >> $GITHUB_OUTPUT  # Leave empty; already checked out
        elif [ "${{ github.event_name }}" = "push" ]; then
            echo "BASE_BRANCH=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "FEATURE_BRANCH=" >> $GITHUB_OUTPUT
        else
            echo "Unsupported event: ${{ github.event_name }}"
            exit 1
        fi

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        # Only specify ref if FEATURE_BRANCH is set (e.g. on PRs)
        ref: ${{ steps.vars.outputs.FEATURE_BRANCH != '' && steps.vars.outputs.FEATURE_BRANCH || null }}

    - name: Find modified Swift files and lint them
      run: |
        RAW_BASE_BRANCH="${{ steps.vars.outputs.BASE_BRANCH }}"
        RAW_FEATURE_BRANCH="${{ steps.vars.outputs.FEATURE_BRANCH }}"

        BASE_BRANCH="${RAW_BASE_BRANCH/refs\/heads\//}"
        FEATURE_BRANCH="${RAW_FEATURE_BRANCH/refs\/heads\//}"

        if [ -z "$FEATURE_BRANCH" ]; then
          echo "Running in merge queue; using HEAD for diff."
          git fetch origin "$BASE_BRANCH"
          modified_files=($(git diff --name-only origin/$BASE_BRANCH -- '*.swift'))
        else
          git fetch origin "$BASE_BRANCH" "$FEATURE_BRANCH"
          modified_files=($(git diff --name-only origin/$BASE_BRANCH...origin/$FEATURE_BRANCH -- '*.swift'))
        fi

        readonly modified_files

        if [ ${#modified_files[@]} -eq 0 ]; then
            echo "No Swift files were changed. Linter won't run."
            exit 0
        fi

        echo "Base branch: $BASE_BRANCH"
        echo "Feature branch: $FEATURE_BRANCH"
        echo "Modified Swift files found: ${#modified_files[@]}"
        printf '%s\n' "${modified_files[@]}"

        # Run SwiftLint normally - it will respect exclusion rules in .swiftlint.yml
        echo "Executing: ./bin/swiftlint/run-swiftlint.sh"
        ./bin/swiftlint/run-swiftlint.sh
