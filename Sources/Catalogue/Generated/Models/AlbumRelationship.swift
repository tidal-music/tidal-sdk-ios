//
// AlbumRelationship.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** attributes object representing some of the resource&#39;s data */
public struct AlbumRelationship: Codable, Hashable {

    public enum Availability: String, Codable, CaseIterable {
        case stream = "STREAM"
        case dj = "DJ"
        case stem = "STEM"
    }
    /** Provider name. Conditionally visible. */
    public var name: String
    /** Album popularity (ranged in 0.00 ... 1.00). Conditionally visible */
    public var popularity: Double
    /** Represents available links to, and metadata about, an album cover images */
    public var imageLinks: [ImageLink]?
    /** Represents available links to something that is related to an album resource, but external to the TIDAL API */
    public var externalLinks: [ExternalLink]?
    /** Original title */
    public var title: String
    /** Version of the album's item; complements title */
    public var version: String?
    /** ISRC code */
    public var isrc: String
    /** Duration (ISO-8601) */
    public var duration: String
    /** Copyright information */
    public var copyright: String?
    /** Indicates whether an album consist of any explicit content */
    public var explicit: Bool
    /** Defines an album availability e.g. for streaming, DJs, stems */
    public var availability: [Availability]?
    public var mediaTags: [String]
    /** Release date (ISO-8601) */
    public var releaseDate: Date?
    /** Barcode id (EAN-13 or UPC-A) */
    public var barcodeId: String
    /** Number of volumes */
    public var numberOfVolumes: Int
    /** Number of album items */
    public var numberOfItems: Int
    /** Represents available links to, and metadata about, an album cover videos */
    public var videoLinks: [VideoLink]?

    public init(name: String, popularity: Double, imageLinks: [ImageLink]? = nil, externalLinks: [ExternalLink]? = nil, title: String, version: String? = nil, isrc: String, duration: String, copyright: String? = nil, explicit: Bool, availability: [Availability]? = nil, mediaTags: [String], releaseDate: Date? = nil, barcodeId: String, numberOfVolumes: Int, numberOfItems: Int, videoLinks: [VideoLink]? = nil) {
        self.name = name
        self.popularity = popularity
        self.imageLinks = imageLinks
        self.externalLinks = externalLinks
        self.title = title
        self.version = version
        self.isrc = isrc
        self.duration = duration
        self.copyright = copyright
        self.explicit = explicit
        self.availability = availability
        self.mediaTags = mediaTags
        self.releaseDate = releaseDate
        self.barcodeId = barcodeId
        self.numberOfVolumes = numberOfVolumes
        self.numberOfItems = numberOfItems
        self.videoLinks = videoLinks
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case popularity
        case imageLinks
        case externalLinks
        case title
        case version
        case isrc
        case duration
        case copyright
        case explicit
        case availability
        case mediaTags
        case releaseDate
        case barcodeId
        case numberOfVolumes
        case numberOfItems
        case videoLinks
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(popularity, forKey: .popularity)
        try container.encodeIfPresent(imageLinks, forKey: .imageLinks)
        try container.encodeIfPresent(externalLinks, forKey: .externalLinks)
        try container.encode(title, forKey: .title)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encode(isrc, forKey: .isrc)
        try container.encode(duration, forKey: .duration)
        try container.encodeIfPresent(copyright, forKey: .copyright)
        try container.encode(explicit, forKey: .explicit)
        try container.encodeIfPresent(availability, forKey: .availability)
        try container.encode(mediaTags, forKey: .mediaTags)
        try container.encodeIfPresent(releaseDate, forKey: .releaseDate)
        try container.encode(barcodeId, forKey: .barcodeId)
        try container.encode(numberOfVolumes, forKey: .numberOfVolumes)
        try container.encode(numberOfItems, forKey: .numberOfItems)
        try container.encodeIfPresent(videoLinks, forKey: .videoLinks)
    }
}

