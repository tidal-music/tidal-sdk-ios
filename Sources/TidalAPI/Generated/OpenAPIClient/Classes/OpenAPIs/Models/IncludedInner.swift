//
// IncludedInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public enum IncludedInner: Codable, JSONEncodable, Hashable {
    case typeAlbumsResource(AlbumsResource)
    case typeArtistRolesResource(ArtistRolesResource)
    case typeArtistsResource(ArtistsResource)
    case typeArtworksResource(ArtworksResource)
    case typePlaylistsResource(PlaylistsResource)
    case typeProvidersResource(ProvidersResource)
    case typeSearchResultsResource(SearchResultsResource)
    case typeSearchSuggestionsResource(SearchSuggestionsResource)
    case typeTrackFilesResource(TrackFilesResource)
    case typeTrackManifestsResource(TrackManifestsResource)
    case typeTrackStatisticsResource(TrackStatisticsResource)
    case typeTracksResource(TracksResource)
    case typeUserCollectionsResource(UserCollectionsResource)
    case typeUserEntitlementsResource(UserEntitlementsResource)
    case typeUserRecommendationsResource(UserRecommendationsResource)
    case typeUserReportsResource(UserReportsResource)
    case typeUsersResource(UsersResource)
    case typeVideosResource(VideosResource)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeAlbumsResource(let value):
            try container.encode(value)
        case .typeArtistRolesResource(let value):
            try container.encode(value)
        case .typeArtistsResource(let value):
            try container.encode(value)
        case .typeArtworksResource(let value):
            try container.encode(value)
        case .typePlaylistsResource(let value):
            try container.encode(value)
        case .typeProvidersResource(let value):
            try container.encode(value)
        case .typeSearchResultsResource(let value):
            try container.encode(value)
        case .typeSearchSuggestionsResource(let value):
            try container.encode(value)
        case .typeTrackFilesResource(let value):
            try container.encode(value)
        case .typeTrackManifestsResource(let value):
            try container.encode(value)
        case .typeTrackStatisticsResource(let value):
            try container.encode(value)
        case .typeTracksResource(let value):
            try container.encode(value)
        case .typeUserCollectionsResource(let value):
            try container.encode(value)
        case .typeUserEntitlementsResource(let value):
            try container.encode(value)
        case .typeUserRecommendationsResource(let value):
            try container.encode(value)
        case .typeUserReportsResource(let value):
            try container.encode(value)
        case .typeUsersResource(let value):
            try container.encode(value)
        case .typeVideosResource(let value):
            try container.encode(value)
        }
    }
    
    private enum CodingKeys: String, CodingKey {
        case type
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        let type = try container.decode(String.self, forKey: .type)

        switch type {
        case "albums":
            let value = try AlbumsResource(from: decoder)
            self = .typeAlbumsResource(value)
        case "artistRoles":
            let value = try ArtistRolesResource(from: decoder)
            self = .typeArtistRolesResource(value)
        case "artists":
            let value = try ArtistsResource(from: decoder)
            self = .typeArtistsResource(value)
        case "artworks":
            let value = try ArtworksResource(from: decoder)
            self = .typeArtworksResource(value)
        case "playlists":
            let value = try PlaylistsResource(from: decoder)
            self = .typePlaylistsResource(value)
        case "providers":
            let value = try ProvidersResource(from: decoder)
            self = .typeProvidersResource(value)
        case "searchResults":
            let value = try SearchResultsResource(from: decoder)
            self = .typeSearchResultsResource(value)
        case "searchSuggestions":
            let value = try SearchSuggestionsResource(from: decoder)
            self = .typeSearchSuggestionsResource(value)
        case "trackFiles":
            let value = try TrackFilesResource(from: decoder)
            self = .typeTrackFilesResource(value)
        case "trackManifests":
            let value = try TrackManifestsResource(from: decoder)
            self = .typeTrackManifestsResource(value)
        case "trackStatistics":
            let value = try TrackStatisticsResource(from: decoder)
            self = .typeTrackStatisticsResource(value)
        case "tracks":
            let value = try TracksResource(from: decoder)
            self = .typeTracksResource(value)
        case "userCollections":
            let value = try UserCollectionsResource(from: decoder)
            self = .typeUserCollectionsResource(value)
        case "userEntitlements":
            let value = try UserEntitlementsResource(from: decoder)
            self = .typeUserEntitlementsResource(value)
        case "userRecommendations":
            let value = try UserRecommendationsResource(from: decoder)
            self = .typeUserRecommendationsResource(value)
        case "userReports":
            let value = try UserReportsResource(from: decoder)
            self = .typeUserReportsResource(value)
        case "users":
            let value = try UsersResource(from: decoder)
            self = .typeUsersResource(value)
        case "videos":
            let value = try VideosResource(from: decoder)
            self = .typeVideosResource(value)
        default:
            throw DecodingError.dataCorruptedError(forKey: .type, in: container, debugDescription: "Unknown type: \\(type)")
        }
    }
}

@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension IncludedInner: Identifiable {
    public var id: String {
        switch self {
        case .typeAlbumsResource(let value): return value.id
        case .typeArtistRolesResource(let value): return value.id
        case .typeArtistsResource(let value): return value.id
        case .typeArtworksResource(let value): return value.id
        case .typePlaylistsResource(let value): return value.id
        case .typeProvidersResource(let value): return value.id
        case .typeSearchResultsResource(let value): return value.id
        case .typeSearchSuggestionsResource(let value): return value.id
        case .typeTrackFilesResource(let value): return value.id
        case .typeTrackManifestsResource(let value): return value.id
        case .typeTrackStatisticsResource(let value): return value.id
        case .typeTracksResource(let value): return value.id
        case .typeUserCollectionsResource(let value): return value.id
        case .typeUserEntitlementsResource(let value): return value.id
        case .typeUserRecommendationsResource(let value): return value.id
        case .typeUserReportsResource(let value): return value.id
        case .typeUsersResource(let value): return value.id
        case .typeVideosResource(let value): return value.id
        }
    }
}


