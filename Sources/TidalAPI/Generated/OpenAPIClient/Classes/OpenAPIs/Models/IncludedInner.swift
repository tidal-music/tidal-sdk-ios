//
// IncludedInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public enum IncludedInner: Codable, JSONEncodable, Hashable {
    case typeAlbumsResourceObject(AlbumsResourceObject)
    case typeAppreciationsResourceObject(AppreciationsResourceObject)
    case typeArtistBiographiesResourceObject(ArtistBiographiesResourceObject)
    case typeArtistClaimsResourceObject(ArtistClaimsResourceObject)
    case typeArtistRolesResourceObject(ArtistRolesResourceObject)
    case typeArtistsResourceObject(ArtistsResourceObject)
    case typeArtworksResourceObject(ArtworksResourceObject)
    case typeGenresResourceObject(GenresResourceObject)
    case typeLyricsResourceObject(LyricsResourceObject)
    case typePlaylistsResourceObject(PlaylistsResourceObject)
    case typeProvidersResourceObject(ProvidersResourceObject)
    case typeSearchResultsResourceObject(SearchResultsResourceObject)
    case typeSearchSuggestionsResourceObject(SearchSuggestionsResourceObject)
    case typeTrackFilesResourceObject(TrackFilesResourceObject)
    case typeTrackManifestsResourceObject(TrackManifestsResourceObject)
    case typeTrackSourceFilesResourceObject(TrackSourceFilesResourceObject)
    case typeTrackStatisticsResourceObject(TrackStatisticsResourceObject)
    case typeTracksResourceObject(TracksResourceObject)
    case typeUserCollectionsResourceObject(UserCollectionsResourceObject)
    case typeUserEntitlementsResourceObject(UserEntitlementsResourceObject)
    case typeUserRecommendationsResourceObject(UserRecommendationsResourceObject)
    case typeUserReportsResourceObject(UserReportsResourceObject)
    case typeUserSharesResourceObject(UserSharesResourceObject)
    case typeUsersResourceObject(UsersResourceObject)
    case typeVideosResourceObject(VideosResourceObject)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeAlbumsResourceObject(let value):
            try container.encode(value)
        case .typeAppreciationsResourceObject(let value):
            try container.encode(value)
        case .typeArtistBiographiesResourceObject(let value):
            try container.encode(value)
        case .typeArtistClaimsResourceObject(let value):
            try container.encode(value)
        case .typeArtistRolesResourceObject(let value):
            try container.encode(value)
        case .typeArtistsResourceObject(let value):
            try container.encode(value)
        case .typeArtworksResourceObject(let value):
            try container.encode(value)
        case .typeGenresResourceObject(let value):
            try container.encode(value)
        case .typeLyricsResourceObject(let value):
            try container.encode(value)
        case .typePlaylistsResourceObject(let value):
            try container.encode(value)
        case .typeProvidersResourceObject(let value):
            try container.encode(value)
        case .typeSearchResultsResourceObject(let value):
            try container.encode(value)
        case .typeSearchSuggestionsResourceObject(let value):
            try container.encode(value)
        case .typeTrackFilesResourceObject(let value):
            try container.encode(value)
        case .typeTrackManifestsResourceObject(let value):
            try container.encode(value)
        case .typeTrackSourceFilesResourceObject(let value):
            try container.encode(value)
        case .typeTrackStatisticsResourceObject(let value):
            try container.encode(value)
        case .typeTracksResourceObject(let value):
            try container.encode(value)
        case .typeUserCollectionsResourceObject(let value):
            try container.encode(value)
        case .typeUserEntitlementsResourceObject(let value):
            try container.encode(value)
        case .typeUserRecommendationsResourceObject(let value):
            try container.encode(value)
        case .typeUserReportsResourceObject(let value):
            try container.encode(value)
        case .typeUserSharesResourceObject(let value):
            try container.encode(value)
        case .typeUsersResourceObject(let value):
            try container.encode(value)
        case .typeVideosResourceObject(let value):
            try container.encode(value)
        }
    }
    
    private enum CodingKeys: String, CodingKey {
        case type
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        let type = try container.decode(String.self, forKey: .type)

        switch type {
        case "albums":
            let value = try AlbumsResourceObject(from: decoder)
            self = .typeAlbumsResourceObject(value)
        case "appreciations":
            let value = try AppreciationsResourceObject(from: decoder)
            self = .typeAppreciationsResourceObject(value)
        case "artistBiographies":
            let value = try ArtistBiographiesResourceObject(from: decoder)
            self = .typeArtistBiographiesResourceObject(value)
        case "artistClaims":
            let value = try ArtistClaimsResourceObject(from: decoder)
            self = .typeArtistClaimsResourceObject(value)
        case "artistRoles":
            let value = try ArtistRolesResourceObject(from: decoder)
            self = .typeArtistRolesResourceObject(value)
        case "artists":
            let value = try ArtistsResourceObject(from: decoder)
            self = .typeArtistsResourceObject(value)
        case "artworks":
            let value = try ArtworksResourceObject(from: decoder)
            self = .typeArtworksResourceObject(value)
        case "genres":
            let value = try GenresResourceObject(from: decoder)
            self = .typeGenresResourceObject(value)
        case "lyrics":
            let value = try LyricsResourceObject(from: decoder)
            self = .typeLyricsResourceObject(value)
        case "playlists":
            let value = try PlaylistsResourceObject(from: decoder)
            self = .typePlaylistsResourceObject(value)
        case "providers":
            let value = try ProvidersResourceObject(from: decoder)
            self = .typeProvidersResourceObject(value)
        case "searchResults":
            let value = try SearchResultsResourceObject(from: decoder)
            self = .typeSearchResultsResourceObject(value)
        case "searchSuggestions":
            let value = try SearchSuggestionsResourceObject(from: decoder)
            self = .typeSearchSuggestionsResourceObject(value)
        case "trackFiles":
            let value = try TrackFilesResourceObject(from: decoder)
            self = .typeTrackFilesResourceObject(value)
        case "trackManifests":
            let value = try TrackManifestsResourceObject(from: decoder)
            self = .typeTrackManifestsResourceObject(value)
        case "trackSourceFiles":
            let value = try TrackSourceFilesResourceObject(from: decoder)
            self = .typeTrackSourceFilesResourceObject(value)
        case "trackStatistics":
            let value = try TrackStatisticsResourceObject(from: decoder)
            self = .typeTrackStatisticsResourceObject(value)
        case "tracks":
            let value = try TracksResourceObject(from: decoder)
            self = .typeTracksResourceObject(value)
        case "userCollections":
            let value = try UserCollectionsResourceObject(from: decoder)
            self = .typeUserCollectionsResourceObject(value)
        case "userEntitlements":
            let value = try UserEntitlementsResourceObject(from: decoder)
            self = .typeUserEntitlementsResourceObject(value)
        case "userRecommendations":
            let value = try UserRecommendationsResourceObject(from: decoder)
            self = .typeUserRecommendationsResourceObject(value)
        case "userReports":
            let value = try UserReportsResourceObject(from: decoder)
            self = .typeUserReportsResourceObject(value)
        case "userShares":
            let value = try UserSharesResourceObject(from: decoder)
            self = .typeUserSharesResourceObject(value)
        case "users":
            let value = try UsersResourceObject(from: decoder)
            self = .typeUsersResourceObject(value)
        case "videos":
            let value = try VideosResourceObject(from: decoder)
            self = .typeVideosResourceObject(value)
        default:
            throw DecodingError.dataCorruptedError(forKey: .type, in: container, debugDescription: "Unknown type: \\(type)")
        }
    }
}

@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension IncludedInner: Identifiable {
    public var id: String {
        switch self {
        case .typeAlbumsResourceObject(let value): return value.id
        case .typeAppreciationsResourceObject(let value): return value.id
        case .typeArtistBiographiesResourceObject(let value): return value.id
        case .typeArtistClaimsResourceObject(let value): return value.id
        case .typeArtistRolesResourceObject(let value): return value.id
        case .typeArtistsResourceObject(let value): return value.id
        case .typeArtworksResourceObject(let value): return value.id
        case .typeGenresResourceObject(let value): return value.id
        case .typeLyricsResourceObject(let value): return value.id
        case .typePlaylistsResourceObject(let value): return value.id
        case .typeProvidersResourceObject(let value): return value.id
        case .typeSearchResultsResourceObject(let value): return value.id
        case .typeSearchSuggestionsResourceObject(let value): return value.id
        case .typeTrackFilesResourceObject(let value): return value.id
        case .typeTrackManifestsResourceObject(let value): return value.id
        case .typeTrackSourceFilesResourceObject(let value): return value.id
        case .typeTrackStatisticsResourceObject(let value): return value.id
        case .typeTracksResourceObject(let value): return value.id
        case .typeUserCollectionsResourceObject(let value): return value.id
        case .typeUserEntitlementsResourceObject(let value): return value.id
        case .typeUserRecommendationsResourceObject(let value): return value.id
        case .typeUserReportsResourceObject(let value): return value.id
        case .typeUserSharesResourceObject(let value): return value.id
        case .typeUsersResourceObject(let value): return value.id
        case .typeVideosResourceObject(let value): return value.id
        }
    }
}


