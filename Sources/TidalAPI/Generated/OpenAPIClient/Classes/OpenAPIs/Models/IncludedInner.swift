//
// IncludedInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public enum IncludedInner: Codable, JSONEncodable, Hashable {
    case albumsResourceObject(AlbumsResourceObject)
    case appreciationsResourceObject(AppreciationsResourceObject)
    case artistBiographiesResourceObject(ArtistBiographiesResourceObject)
    case artistClaimsResourceObject(ArtistClaimsResourceObject)
    case artistRolesResourceObject(ArtistRolesResourceObject)
    case artistsResourceObject(ArtistsResourceObject)
    case artworksResourceObject(ArtworksResourceObject)
    case genresResourceObject(GenresResourceObject)
    case lyricsResourceObject(LyricsResourceObject)
    case playlistsResourceObject(PlaylistsResourceObject)
    case providersResourceObject(ProvidersResourceObject)
    case searchResultsResourceObject(SearchResultsResourceObject)
    case searchSuggestionsResourceObject(SearchSuggestionsResourceObject)
    case sharesResourceObject(SharesResourceObject)
    case trackFilesResourceObject(TrackFilesResourceObject)
    case trackManifestsResourceObject(TrackManifestsResourceObject)
    case trackSourceFilesResourceObject(TrackSourceFilesResourceObject)
    case trackStatisticsResourceObject(TrackStatisticsResourceObject)
    case tracksResourceObject(TracksResourceObject)
    case userCollectionsResourceObject(UserCollectionsResourceObject)
    case userEntitlementsResourceObject(UserEntitlementsResourceObject)
    case userRecommendationsResourceObject(UserRecommendationsResourceObject)
    case userReportsResourceObject(UserReportsResourceObject)
    case usersResourceObject(UsersResourceObject)
    case videosResourceObject(VideosResourceObject)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .albumsResourceObject(let value):
            try container.encode(value)
        case .appreciationsResourceObject(let value):
            try container.encode(value)
        case .artistBiographiesResourceObject(let value):
            try container.encode(value)
        case .artistClaimsResourceObject(let value):
            try container.encode(value)
        case .artistRolesResourceObject(let value):
            try container.encode(value)
        case .artistsResourceObject(let value):
            try container.encode(value)
        case .artworksResourceObject(let value):
            try container.encode(value)
        case .genresResourceObject(let value):
            try container.encode(value)
        case .lyricsResourceObject(let value):
            try container.encode(value)
        case .playlistsResourceObject(let value):
            try container.encode(value)
        case .providersResourceObject(let value):
            try container.encode(value)
        case .searchResultsResourceObject(let value):
            try container.encode(value)
        case .searchSuggestionsResourceObject(let value):
            try container.encode(value)
        case .sharesResourceObject(let value):
            try container.encode(value)
        case .trackFilesResourceObject(let value):
            try container.encode(value)
        case .trackManifestsResourceObject(let value):
            try container.encode(value)
        case .trackSourceFilesResourceObject(let value):
            try container.encode(value)
        case .trackStatisticsResourceObject(let value):
            try container.encode(value)
        case .tracksResourceObject(let value):
            try container.encode(value)
        case .userCollectionsResourceObject(let value):
            try container.encode(value)
        case .userEntitlementsResourceObject(let value):
            try container.encode(value)
        case .userRecommendationsResourceObject(let value):
            try container.encode(value)
        case .userReportsResourceObject(let value):
            try container.encode(value)
        case .usersResourceObject(let value):
            try container.encode(value)
        case .videosResourceObject(let value):
            try container.encode(value)
        }
    }
    
    private enum CodingKeys: String, CodingKey {
        case type
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        let type = try container.decode(String.self, forKey: .type)

        switch type {
        case "albums":
            let value = try AlbumsResourceObject(from: decoder)
            self = .albumsResourceObject(value)
        case "appreciations":
            let value = try AppreciationsResourceObject(from: decoder)
            self = .appreciationsResourceObject(value)
        case "artistBiographies":
            let value = try ArtistBiographiesResourceObject(from: decoder)
            self = .artistBiographiesResourceObject(value)
        case "artistClaims":
            let value = try ArtistClaimsResourceObject(from: decoder)
            self = .artistClaimsResourceObject(value)
        case "artistRoles":
            let value = try ArtistRolesResourceObject(from: decoder)
            self = .artistRolesResourceObject(value)
        case "artists":
            let value = try ArtistsResourceObject(from: decoder)
            self = .artistsResourceObject(value)
        case "artworks":
            let value = try ArtworksResourceObject(from: decoder)
            self = .artworksResourceObject(value)
        case "genres":
            let value = try GenresResourceObject(from: decoder)
            self = .genresResourceObject(value)
        case "lyrics":
            let value = try LyricsResourceObject(from: decoder)
            self = .lyricsResourceObject(value)
        case "playlists":
            let value = try PlaylistsResourceObject(from: decoder)
            self = .playlistsResourceObject(value)
        case "providers":
            let value = try ProvidersResourceObject(from: decoder)
            self = .providersResourceObject(value)
        case "searchResults":
            let value = try SearchResultsResourceObject(from: decoder)
            self = .searchResultsResourceObject(value)
        case "searchSuggestions":
            let value = try SearchSuggestionsResourceObject(from: decoder)
            self = .searchSuggestionsResourceObject(value)
        case "shares":
            let value = try SharesResourceObject(from: decoder)
            self = .sharesResourceObject(value)
        case "trackFiles":
            let value = try TrackFilesResourceObject(from: decoder)
            self = .trackFilesResourceObject(value)
        case "trackManifests":
            let value = try TrackManifestsResourceObject(from: decoder)
            self = .trackManifestsResourceObject(value)
        case "trackSourceFiles":
            let value = try TrackSourceFilesResourceObject(from: decoder)
            self = .trackSourceFilesResourceObject(value)
        case "trackStatistics":
            let value = try TrackStatisticsResourceObject(from: decoder)
            self = .trackStatisticsResourceObject(value)
        case "tracks":
            let value = try TracksResourceObject(from: decoder)
            self = .tracksResourceObject(value)
        case "userCollections":
            let value = try UserCollectionsResourceObject(from: decoder)
            self = .userCollectionsResourceObject(value)
        case "userEntitlements":
            let value = try UserEntitlementsResourceObject(from: decoder)
            self = .userEntitlementsResourceObject(value)
        case "userRecommendations":
            let value = try UserRecommendationsResourceObject(from: decoder)
            self = .userRecommendationsResourceObject(value)
        case "userReports":
            let value = try UserReportsResourceObject(from: decoder)
            self = .userReportsResourceObject(value)
        case "users":
            let value = try UsersResourceObject(from: decoder)
            self = .usersResourceObject(value)
        case "videos":
            let value = try VideosResourceObject(from: decoder)
            self = .videosResourceObject(value)
        default:
            throw DecodingError.dataCorruptedError(forKey: .type, in: container, debugDescription: "Unknown type: \\(type)")
        }
    }
}

@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension IncludedInner: Identifiable {
    public var id: String {
        switch self {
        case .albumsResourceObject(let value): return value.id
        case .appreciationsResourceObject(let value): return value.id
        case .artistBiographiesResourceObject(let value): return value.id
        case .artistClaimsResourceObject(let value): return value.id
        case .artistRolesResourceObject(let value): return value.id
        case .artistsResourceObject(let value): return value.id
        case .artworksResourceObject(let value): return value.id
        case .genresResourceObject(let value): return value.id
        case .lyricsResourceObject(let value): return value.id
        case .playlistsResourceObject(let value): return value.id
        case .providersResourceObject(let value): return value.id
        case .searchResultsResourceObject(let value): return value.id
        case .searchSuggestionsResourceObject(let value): return value.id
        case .sharesResourceObject(let value): return value.id
        case .trackFilesResourceObject(let value): return value.id
        case .trackManifestsResourceObject(let value): return value.id
        case .trackSourceFilesResourceObject(let value): return value.id
        case .trackStatisticsResourceObject(let value): return value.id
        case .tracksResourceObject(let value): return value.id
        case .userCollectionsResourceObject(let value): return value.id
        case .userEntitlementsResourceObject(let value): return value.id
        case .userRecommendationsResourceObject(let value): return value.id
        case .userReportsResourceObject(let value): return value.id
        case .usersResourceObject(let value): return value.id
        case .videosResourceObject(let value): return value.id
        }
    }
}

