//
// ArtistClaimsAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ArtistClaimsAttributes: Codable, Hashable {

    public enum Provider: String, Codable, CaseIterable {
        case distrokid
        case cdbaby
        case tunecore
    }
    public enum Recommendation: String, Codable, CaseIterable {
        case dspProfileClaimed
        case contentMigratedToUploads
        case noContentMatched
    }
    public enum Status: String, Codable, CaseIterable {
        case awaitingOauth
        case fetchingContent
        case verified
        case noMatches
        case authenticationFailed
        case processing
        case completed
        case failed
        case cancelled
    }
    public static let providerRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    /** The DSP used for authentication */
    public var provider: Provider
    /** The recommended claim resolution */
    public var recommendation: Recommendation?
    /** The DSP redirect url used for authentication */
    public var redirectUrl: String?
    /** List of UPCs retrieved from the DSP */
    public var retrievedUpcs: [BarcodeId]?
    /** Current status of this claim */
    public var status: Status?

    public init(
        provider: Provider,
        recommendation: Recommendation? = nil,
        redirectUrl: String? = nil,
        retrievedUpcs: [BarcodeId]? = nil,
        status: Status? = nil
    ) {
        self.provider = provider
        self.recommendation = recommendation
        self.redirectUrl = redirectUrl
        self.retrievedUpcs = retrievedUpcs
        self.status = status
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case provider
        case recommendation
        case redirectUrl
        case retrievedUpcs
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(provider, forKey: .provider)
        try container.encodeIfPresent(recommendation, forKey: .recommendation)
        try container.encodeIfPresent(redirectUrl, forKey: .redirectUrl)
        try container.encodeIfPresent(retrievedUpcs, forKey: .retrievedUpcs)
        try container.encodeIfPresent(status, forKey: .status)
    }
}


