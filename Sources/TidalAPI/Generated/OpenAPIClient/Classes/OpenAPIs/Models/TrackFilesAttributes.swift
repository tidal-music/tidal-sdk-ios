//
// TrackFilesAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TrackFilesAttributes: Codable, Hashable {

    public enum TrackPresentation: String, Codable, CaseIterable {
        case full = "FULL"
        case preview = "PREVIEW"
    }
    public enum Format: String, Codable, CaseIterable {
        case heaacv1 = "HEAACV1"
        case aaclc = "AACLC"
        case flac = "FLAC"
        case flacHires = "FLAC_HIRES"
    }
    /** Track presentation */
    public var trackPresentation: TrackPresentation?
    /** File URL */
    public var url: String?
    /** File's audio format */
    public var format: Format?
    public var albumAudioNormalizationData: AudioNormalizationData?
    public var trackAudioNormalizationData: AudioNormalizationData?

    public init(trackPresentation: TrackPresentation? = nil, url: String? = nil, format: Format? = nil, albumAudioNormalizationData: AudioNormalizationData? = nil, trackAudioNormalizationData: AudioNormalizationData? = nil) {
        self.trackPresentation = trackPresentation
        self.url = url
        self.format = format
        self.albumAudioNormalizationData = albumAudioNormalizationData
        self.trackAudioNormalizationData = trackAudioNormalizationData
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case trackPresentation
        case url
        case format
        case albumAudioNormalizationData
        case trackAudioNormalizationData
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(trackPresentation, forKey: .trackPresentation)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(format, forKey: .format)
        try container.encodeIfPresent(albumAudioNormalizationData, forKey: .albumAudioNormalizationData)
        try container.encodeIfPresent(trackAudioNormalizationData, forKey: .trackAudioNormalizationData)
    }
}


