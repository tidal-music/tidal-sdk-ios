//
// TracksAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TracksAttributes: Codable, Hashable {

    public enum AccessType: String, Codable, CaseIterable {
        case _public
        case unlisted
        case _private
    }
    public enum Availability: String, Codable, CaseIterable {
        case stream
        case dj
        case stem
    }
    public enum Key: String, Codable, CaseIterable {
        case unknown
        case c
        case csharp
        case d
        case eb
        case e
        case f
        case fsharp
        case g
        case ab
        case a
        case bb
        case b
    }
    public enum KeyScale: String, Codable, CaseIterable {
        case unknown
        case major
        case minor
        case aeolian
        case blues
        case dorian
        case harmonicMinor
        case locrian
        case lydian
        case mixolydian
        case pentatonicMajor
        case phrygian
        case melodicMinor
        case pentatonicMinor
    }
    /** Access type */
    public var accessType: AccessType?
    /** Available usage for this track */
    public var availability: [Availability]?
    /** Beats per minute */
    public var bpm: Float?
    public var copyright: Copyright?
    /** Datetime of track creation (ISO 8601) */
    public var createdAt: Date?
    /** Duration (ISO 8601) */
    public var duration: String
    /** Explicit content */
    public var explicit: Bool
    /** Track links external to TIDAL API */
    public var externalLinks: [ExternalLink]?
    /** International Standard Recording Code (ISRC) */
    public var isrc: String
    /** Key */
    public var key: Key
    /** The scale of the key */
    public var keyScale: KeyScale
    public var mediaTags: [String]
    /** Popularity (0.0 - 1.0) */
    public var popularity: Double
    /** Is the track spotlighted? */
    public var spotlighted: Bool?
    /** Track title */
    public var title: String
    public var toneTags: [String]?
    /** Track version, complements title */
    public var version: String?

    public init(
        accessType: AccessType? = nil,
        availability: [Availability]? = nil,
        bpm: Float? = nil,
        copyright: Copyright? = nil,
        createdAt: Date? = nil,
        duration: String,
        explicit: Bool,
        externalLinks: [ExternalLink]? = nil,
        isrc: String,
        key: Key,
        keyScale: KeyScale,
        mediaTags: [String],
        popularity: Double,
        spotlighted: Bool? = nil,
        title: String,
        toneTags: [String]? = nil,
        version: String? = nil
    ) {
        self.accessType = accessType
        self.availability = availability
        self.bpm = bpm
        self.copyright = copyright
        self.createdAt = createdAt
        self.duration = duration
        self.explicit = explicit
        self.externalLinks = externalLinks
        self.isrc = isrc
        self.key = key
        self.keyScale = keyScale
        self.mediaTags = mediaTags
        self.popularity = popularity
        self.spotlighted = spotlighted
        self.title = title
        self.toneTags = toneTags
        self.version = version
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accessType
        case availability
        case bpm
        case copyright
        case createdAt
        case duration
        case explicit
        case externalLinks
        case isrc
        case key
        case keyScale
        case mediaTags
        case popularity
        case spotlighted
        case title
        case toneTags
        case version
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accessType, forKey: .accessType)
        try container.encodeIfPresent(availability, forKey: .availability)
        try container.encodeIfPresent(bpm, forKey: .bpm)
        try container.encodeIfPresent(copyright, forKey: .copyright)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encode(duration, forKey: .duration)
        try container.encode(explicit, forKey: .explicit)
        try container.encodeIfPresent(externalLinks, forKey: .externalLinks)
        try container.encode(isrc, forKey: .isrc)
        try container.encode(key, forKey: .key)
        try container.encode(keyScale, forKey: .keyScale)
        try container.encode(mediaTags, forKey: .mediaTags)
        try container.encode(popularity, forKey: .popularity)
        try container.encodeIfPresent(spotlighted, forKey: .spotlighted)
        try container.encode(title, forKey: .title)
        try container.encodeIfPresent(toneTags, forKey: .toneTags)
        try container.encodeIfPresent(version, forKey: .version)
    }
}


