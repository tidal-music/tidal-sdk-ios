//
// AlbumsAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AlbumsAttributes: Codable, Hashable {

    public enum Availability: String, Codable, CaseIterable {
        case stream = "STREAM"
        case dj = "DJ"
        case stem = "STEM"
    }
    public enum ModelType: String, Codable, CaseIterable {
        case album = "ALBUM"
        case ep = "EP"
        case single = "SINGLE"
    }
    /** Available usage for this album */
    public var availability: [Availability]?
    /** Barcode id (EAN-13 or UPC-A) */
    public var barcodeId: String
    public var copyright: Copyright?
    /** Duration (ISO 8601) */
    public var duration: String
    /** Explicit content */
    public var explicit: Bool
    /** Album links external to TIDAL API */
    public var externalLinks: [ExternalLink]?
    public var mediaTags: [String]
    /** Number of items in album */
    public var numberOfItems: Int
    /** Number of volumes */
    public var numberOfVolumes: Int
    /** Popularity (0.0 - 1.0) */
    public var popularity: Double
    /** Release date (ISO-8601) */
    public var releaseDate: Date?
    /** Album title */
    public var title: String
    /** Album type */
    public var type: ModelType
    /** Album version */
    public var version: String?

    public init(
        availability: [Availability]? = nil,
        barcodeId: String,
        copyright: Copyright? = nil,
        duration: String,
        explicit: Bool,
        externalLinks: [ExternalLink]? = nil,
        mediaTags: [String],
        numberOfItems: Int,
        numberOfVolumes: Int,
        popularity: Double,
        releaseDate: Date? = nil,
        title: String,
        type: ModelType,
        version: String? = nil
    ) {
        self.availability = availability
        self.barcodeId = barcodeId
        self.copyright = copyright
        self.duration = duration
        self.explicit = explicit
        self.externalLinks = externalLinks
        self.mediaTags = mediaTags
        self.numberOfItems = numberOfItems
        self.numberOfVolumes = numberOfVolumes
        self.popularity = popularity
        self.releaseDate = releaseDate
        self.title = title
        self.type = type
        self.version = version
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case availability
        case barcodeId
        case copyright
        case duration
        case explicit
        case externalLinks
        case mediaTags
        case numberOfItems
        case numberOfVolumes
        case popularity
        case releaseDate
        case title
        case type
        case version
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(availability, forKey: .availability)
        try container.encode(barcodeId, forKey: .barcodeId)
        try container.encodeIfPresent(copyright, forKey: .copyright)
        try container.encode(duration, forKey: .duration)
        try container.encode(explicit, forKey: .explicit)
        try container.encodeIfPresent(externalLinks, forKey: .externalLinks)
        try container.encode(mediaTags, forKey: .mediaTags)
        try container.encode(numberOfItems, forKey: .numberOfItems)
        try container.encode(numberOfVolumes, forKey: .numberOfVolumes)
        try container.encode(popularity, forKey: .popularity)
        try container.encodeIfPresent(releaseDate, forKey: .releaseDate)
        try container.encode(title, forKey: .title)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(version, forKey: .version)
    }
}


