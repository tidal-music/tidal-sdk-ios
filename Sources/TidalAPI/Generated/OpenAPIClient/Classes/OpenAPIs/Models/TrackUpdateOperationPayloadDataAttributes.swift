//
// TrackUpdateOperationPayloadDataAttributes.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TrackUpdateOperationPayloadDataAttributes: Codable, Hashable {

    public enum AccessType: String, Codable, CaseIterable {
        case _public = "PUBLIC"
        case unlisted = "UNLISTED"
        case _private = "PRIVATE"
    }
    public enum Key: String, Codable, CaseIterable {
        case unknown = "UNKNOWN"
        case a = "A"
        case ab = "Ab"
        case b = "B"
        case bb = "Bb"
        case c = "C"
        case csharp = "CSharp"
        case d = "D"
        case e = "E"
        case eb = "Eb"
        case f = "F"
        case fsharp = "FSharp"
        case g = "G"
    }
    public enum KeyScale: String, Codable, CaseIterable {
        case unknown = "UNKNOWN"
        case major = "MAJOR"
        case minor = "MINOR"
        case aeolian = "AEOLIAN"
        case blues = "BLUES"
        case dorian = "DORIAN"
        case harmonicMinor = "HARMONIC_MINOR"
        case locrian = "LOCRIAN"
        case lydian = "LYDIAN"
        case mixolydian = "MIXOLYDIAN"
        case pentatonicMajor = "PENTATONIC_MAJOR"
        case phrygian = "PHRYGIAN"
        case melodicMinor = "MELODIC_MINOR"
        case pentatonicMinor = "PENTATONIC_MINOR"
    }
    public static let genreTagsRule = ArrayRule(minItems: 0, maxItems: 5, uniqueItems: false)
    public static let toneTagsRule = ArrayRule(minItems: 0, maxItems: 5, uniqueItems: false)
    /** Access type */
    public var accessType: AccessType?
    public var bpm: Float?
    /** Explicit content */
    public var explicit: Bool?
    public var genreTags: [String]?
    public var key: Key?
    public var keyScale: KeyScale?
    public var title: String?
    public var toneTags: [String]?

    public init(
        accessType: AccessType? = nil,
        bpm: Float? = nil,
        explicit: Bool? = nil,
        genreTags: [String]? = nil,
        key: Key? = nil,
        keyScale: KeyScale? = nil,
        title: String? = nil,
        toneTags: [String]? = nil
    ) {
        self.accessType = accessType
        self.bpm = bpm
        self.explicit = explicit
        self.genreTags = genreTags
        self.key = key
        self.keyScale = keyScale
        self.title = title
        self.toneTags = toneTags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accessType
        case bpm
        case explicit
        case genreTags
        case key
        case keyScale
        case title
        case toneTags
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accessType, forKey: .accessType)
        try container.encodeIfPresent(bpm, forKey: .bpm)
        try container.encodeIfPresent(explicit, forKey: .explicit)
        try container.encodeIfPresent(genreTags, forKey: .genreTags)
        try container.encodeIfPresent(key, forKey: .key)
        try container.encodeIfPresent(keyScale, forKey: .keyScale)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(toneTags, forKey: .toneTags)
    }
}


