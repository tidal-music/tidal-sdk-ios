//
// UserCollectionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal class UserCollectionsAPI {

    /**
     Get all userCollections
     
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter locale: (query) BCP47 locale code 
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: albums, artists, playlists (optional)
     - parameter filterId: (query) Allows to filter the collection of resources based on id attribute value (optional)
     - returns: UserCollectionsMultiDataDocument
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func userCollectionsGet(countryCode: String, locale: String, include: [String]? = nil, filterId: [String]? = nil) async throws -> UserCollectionsMultiDataDocument {
        return try await userCollectionsGetWithRequestBuilder(countryCode: countryCode, locale: locale, include: include, filterId: filterId).execute().body
    }

    /**
     Get all userCollections
     - GET /userCollections
     - Retrieves all userCollection details by available filters or without (if applicable).
     - OAuth:
       - type: oauth2
       - name: Authorization_Code_PKCE
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter locale: (query) BCP47 locale code 
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: albums, artists, playlists (optional)
     - parameter filterId: (query) Allows to filter the collection of resources based on id attribute value (optional)
     - returns: RequestBuilder<UserCollectionsMultiDataDocument> 
     */
    internal class func userCollectionsGetWithRequestBuilder(countryCode: String, locale: String, include: [String]? = nil, filterId: [String]? = nil) -> RequestBuilder<UserCollectionsMultiDataDocument> {
        let localVariablePath = "/userCollections"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "countryCode": (wrappedValue: countryCode.encodeToJSON(), isExplode: true),
            "locale": (wrappedValue: locale.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
            "filter[id]": (wrappedValue: filterId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserCollectionsMultiDataDocument>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get single userCollection
     
     - parameter id: (path) User collection id 
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter locale: (query) BCP47 locale code 
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: albums, artists, playlists (optional)
     - returns: UserCollectionsSingleDataDocument
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func userCollectionsIdGet(id: String, countryCode: String, locale: String, include: [String]? = nil) async throws -> UserCollectionsSingleDataDocument {
        return try await userCollectionsIdGetWithRequestBuilder(id: id, countryCode: countryCode, locale: locale, include: include).execute().body
    }

    /**
     Get single userCollection
     - GET /userCollections/{id}
     - Retrieves userCollection details by an unique id.
     - OAuth:
       - type: oauth2
       - name: Authorization_Code_PKCE
     - parameter id: (path) User collection id 
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter locale: (query) BCP47 locale code 
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: albums, artists, playlists (optional)
     - returns: RequestBuilder<UserCollectionsSingleDataDocument> 
     */
    internal class func userCollectionsIdGetWithRequestBuilder(id: String, countryCode: String, locale: String, include: [String]? = nil) -> RequestBuilder<UserCollectionsSingleDataDocument> {
        var localVariablePath = "/userCollections/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "countryCode": (wrappedValue: countryCode.encodeToJSON(), isExplode: true),
            "locale": (wrappedValue: locale.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserCollectionsSingleDataDocument>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Relationship: albums (remove)
     
     - parameter updateMyCollectionRelationshipPayload: (body)  (optional)
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func userCollectionsIdRelationshipsAlbumsDelete(updateMyCollectionRelationshipPayload: UpdateMyCollectionRelationshipPayload? = nil) async throws {
        return try await userCollectionsIdRelationshipsAlbumsDeleteWithRequestBuilder(updateMyCollectionRelationshipPayload: updateMyCollectionRelationshipPayload).execute().body
    }

    /**
     Relationship: albums (remove)
     - DELETE /userCollections/{id}/relationships/albums
     - Removes items from albums relationship of the related userCollection resource.
     - OAuth:
       - type: oauth2
       - name: Authorization_Code_PKCE
     - parameter updateMyCollectionRelationshipPayload: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    internal class func userCollectionsIdRelationshipsAlbumsDeleteWithRequestBuilder(updateMyCollectionRelationshipPayload: UpdateMyCollectionRelationshipPayload? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/userCollections/{id}/relationships/albums"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateMyCollectionRelationshipPayload)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/vnd.api+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Relationship: albums
     
     - parameter id: (path) User collection id 
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter locale: (query) BCP47 locale code 
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: albums (optional)
     - parameter pageCursor: (query) Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified (optional)
     - returns: UserCollectionsMultiDataRelationshipDocument
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func userCollectionsIdRelationshipsAlbumsGet(id: String, countryCode: String, locale: String, include: [String]? = nil, pageCursor: String? = nil) async throws -> UserCollectionsMultiDataRelationshipDocument {
        return try await userCollectionsIdRelationshipsAlbumsGetWithRequestBuilder(id: id, countryCode: countryCode, locale: locale, include: include, pageCursor: pageCursor).execute().body
    }

    /**
     Relationship: albums
     - GET /userCollections/{id}/relationships/albums
     - Retrieves albums relationship details of the related userCollection resource.
     - OAuth:
       - type: oauth2
       - name: Authorization_Code_PKCE
     - parameter id: (path) User collection id 
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter locale: (query) BCP47 locale code 
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: albums (optional)
     - parameter pageCursor: (query) Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified (optional)
     - returns: RequestBuilder<UserCollectionsMultiDataRelationshipDocument> 
     */
    internal class func userCollectionsIdRelationshipsAlbumsGetWithRequestBuilder(id: String, countryCode: String, locale: String, include: [String]? = nil, pageCursor: String? = nil) -> RequestBuilder<UserCollectionsMultiDataRelationshipDocument> {
        var localVariablePath = "/userCollections/{id}/relationships/albums"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "countryCode": (wrappedValue: countryCode.encodeToJSON(), isExplode: true),
            "locale": (wrappedValue: locale.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
            "page[cursor]": (wrappedValue: pageCursor?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserCollectionsMultiDataRelationshipDocument>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Relationship: albums (add)
     
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter updateMyCollectionRelationshipPayload: (body)  (optional)
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func userCollectionsIdRelationshipsAlbumsPost(countryCode: String, updateMyCollectionRelationshipPayload: UpdateMyCollectionRelationshipPayload? = nil) async throws {
        return try await userCollectionsIdRelationshipsAlbumsPostWithRequestBuilder(countryCode: countryCode, updateMyCollectionRelationshipPayload: updateMyCollectionRelationshipPayload).execute().body
    }

    /**
     Relationship: albums (add)
     - POST /userCollections/{id}/relationships/albums
     - Adds items to albums relationship of the related userCollection resource.
     - OAuth:
       - type: oauth2
       - name: Authorization_Code_PKCE
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter updateMyCollectionRelationshipPayload: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    internal class func userCollectionsIdRelationshipsAlbumsPostWithRequestBuilder(countryCode: String, updateMyCollectionRelationshipPayload: UpdateMyCollectionRelationshipPayload? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/userCollections/{id}/relationships/albums"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateMyCollectionRelationshipPayload)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "countryCode": (wrappedValue: countryCode.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/vnd.api+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Relationship: artists (remove)
     
     - parameter updateMyCollectionRelationshipPayload: (body)  (optional)
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func userCollectionsIdRelationshipsArtistsDelete(updateMyCollectionRelationshipPayload: UpdateMyCollectionRelationshipPayload? = nil) async throws {
        return try await userCollectionsIdRelationshipsArtistsDeleteWithRequestBuilder(updateMyCollectionRelationshipPayload: updateMyCollectionRelationshipPayload).execute().body
    }

    /**
     Relationship: artists (remove)
     - DELETE /userCollections/{id}/relationships/artists
     - Removes items from artists relationship of the related userCollection resource.
     - OAuth:
       - type: oauth2
       - name: Authorization_Code_PKCE
     - parameter updateMyCollectionRelationshipPayload: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    internal class func userCollectionsIdRelationshipsArtistsDeleteWithRequestBuilder(updateMyCollectionRelationshipPayload: UpdateMyCollectionRelationshipPayload? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/userCollections/{id}/relationships/artists"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateMyCollectionRelationshipPayload)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/vnd.api+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Relationship: artists
     
     - parameter id: (path) User collection id 
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter locale: (query) BCP47 locale code 
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: artists (optional)
     - parameter pageCursor: (query) Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified (optional)
     - returns: UserCollectionsMultiDataRelationshipDocument
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func userCollectionsIdRelationshipsArtistsGet(id: String, countryCode: String, locale: String, include: [String]? = nil, pageCursor: String? = nil) async throws -> UserCollectionsMultiDataRelationshipDocument {
        return try await userCollectionsIdRelationshipsArtistsGetWithRequestBuilder(id: id, countryCode: countryCode, locale: locale, include: include, pageCursor: pageCursor).execute().body
    }

    /**
     Relationship: artists
     - GET /userCollections/{id}/relationships/artists
     - Retrieves artists relationship details of the related userCollection resource.
     - OAuth:
       - type: oauth2
       - name: Authorization_Code_PKCE
     - parameter id: (path) User collection id 
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter locale: (query) BCP47 locale code 
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: artists (optional)
     - parameter pageCursor: (query) Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified (optional)
     - returns: RequestBuilder<UserCollectionsMultiDataRelationshipDocument> 
     */
    internal class func userCollectionsIdRelationshipsArtistsGetWithRequestBuilder(id: String, countryCode: String, locale: String, include: [String]? = nil, pageCursor: String? = nil) -> RequestBuilder<UserCollectionsMultiDataRelationshipDocument> {
        var localVariablePath = "/userCollections/{id}/relationships/artists"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "countryCode": (wrappedValue: countryCode.encodeToJSON(), isExplode: true),
            "locale": (wrappedValue: locale.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
            "page[cursor]": (wrappedValue: pageCursor?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserCollectionsMultiDataRelationshipDocument>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Relationship: artists (add)
     
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter updateMyCollectionRelationshipPayload: (body)  (optional)
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func userCollectionsIdRelationshipsArtistsPost(countryCode: String, updateMyCollectionRelationshipPayload: UpdateMyCollectionRelationshipPayload? = nil) async throws {
        return try await userCollectionsIdRelationshipsArtistsPostWithRequestBuilder(countryCode: countryCode, updateMyCollectionRelationshipPayload: updateMyCollectionRelationshipPayload).execute().body
    }

    /**
     Relationship: artists (add)
     - POST /userCollections/{id}/relationships/artists
     - Adds items to artists relationship of the related userCollection resource.
     - OAuth:
       - type: oauth2
       - name: Authorization_Code_PKCE
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter updateMyCollectionRelationshipPayload: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    internal class func userCollectionsIdRelationshipsArtistsPostWithRequestBuilder(countryCode: String, updateMyCollectionRelationshipPayload: UpdateMyCollectionRelationshipPayload? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/userCollections/{id}/relationships/artists"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateMyCollectionRelationshipPayload)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "countryCode": (wrappedValue: countryCode.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/vnd.api+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Relationship: playlists (remove)
     
     - parameter updateMyCollectionRelationshipPayload: (body)  (optional)
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func userCollectionsIdRelationshipsPlaylistsDelete(updateMyCollectionRelationshipPayload: UpdateMyCollectionRelationshipPayload? = nil) async throws {
        return try await userCollectionsIdRelationshipsPlaylistsDeleteWithRequestBuilder(updateMyCollectionRelationshipPayload: updateMyCollectionRelationshipPayload).execute().body
    }

    /**
     Relationship: playlists (remove)
     - DELETE /userCollections/{id}/relationships/playlists
     - Removes items from playlists relationship of the related userCollection resource.
     - OAuth:
       - type: oauth2
       - name: Authorization_Code_PKCE
     - parameter updateMyCollectionRelationshipPayload: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    internal class func userCollectionsIdRelationshipsPlaylistsDeleteWithRequestBuilder(updateMyCollectionRelationshipPayload: UpdateMyCollectionRelationshipPayload? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/userCollections/{id}/relationships/playlists"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateMyCollectionRelationshipPayload)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/vnd.api+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Relationship: playlists
     
     - parameter id: (path) User collection id 
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter locale: (query) BCP47 locale code 
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: playlists (optional)
     - parameter pageCursor: (query) Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified (optional)
     - returns: UserCollectionsMultiDataRelationshipDocument
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func userCollectionsIdRelationshipsPlaylistsGet(id: String, countryCode: String, locale: String, include: [String]? = nil, pageCursor: String? = nil) async throws -> UserCollectionsMultiDataRelationshipDocument {
        return try await userCollectionsIdRelationshipsPlaylistsGetWithRequestBuilder(id: id, countryCode: countryCode, locale: locale, include: include, pageCursor: pageCursor).execute().body
    }

    /**
     Relationship: playlists
     - GET /userCollections/{id}/relationships/playlists
     - Retrieves playlists relationship details of the related userCollection resource.
     - OAuth:
       - type: oauth2
       - name: Authorization_Code_PKCE
     - parameter id: (path) User collection id 
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter locale: (query) BCP47 locale code 
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: playlists (optional)
     - parameter pageCursor: (query) Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified (optional)
     - returns: RequestBuilder<UserCollectionsMultiDataRelationshipDocument> 
     */
    internal class func userCollectionsIdRelationshipsPlaylistsGetWithRequestBuilder(id: String, countryCode: String, locale: String, include: [String]? = nil, pageCursor: String? = nil) -> RequestBuilder<UserCollectionsMultiDataRelationshipDocument> {
        var localVariablePath = "/userCollections/{id}/relationships/playlists"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "countryCode": (wrappedValue: countryCode.encodeToJSON(), isExplode: true),
            "locale": (wrappedValue: locale.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
            "page[cursor]": (wrappedValue: pageCursor?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserCollectionsMultiDataRelationshipDocument>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Relationship: playlists (add)
     
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter updateMyCollectionRelationshipPayload: (body)  (optional)
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func userCollectionsIdRelationshipsPlaylistsPost(countryCode: String, updateMyCollectionRelationshipPayload: UpdateMyCollectionRelationshipPayload? = nil) async throws {
        return try await userCollectionsIdRelationshipsPlaylistsPostWithRequestBuilder(countryCode: countryCode, updateMyCollectionRelationshipPayload: updateMyCollectionRelationshipPayload).execute().body
    }

    /**
     Relationship: playlists (add)
     - POST /userCollections/{id}/relationships/playlists
     - Adds items to playlists relationship of the related userCollection resource.
     - OAuth:
       - type: oauth2
       - name: Authorization_Code_PKCE
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter updateMyCollectionRelationshipPayload: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    internal class func userCollectionsIdRelationshipsPlaylistsPostWithRequestBuilder(countryCode: String, updateMyCollectionRelationshipPayload: UpdateMyCollectionRelationshipPayload? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/userCollections/{id}/relationships/playlists"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateMyCollectionRelationshipPayload)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "countryCode": (wrappedValue: countryCode.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/vnd.api+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get current user's userCollection data
     
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter locale: (query) BCP47 locale code 
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: albums, artists, playlists (optional)
     - returns: UserCollectionsSingleDataDocument
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func userCollectionsMeGet(countryCode: String, locale: String, include: [String]? = nil) async throws -> UserCollectionsSingleDataDocument {
        return try await userCollectionsMeGetWithRequestBuilder(countryCode: countryCode, locale: locale, include: include).execute().body
    }

    /**
     Get current user's userCollection data
     - GET /userCollections/me
     - Retrieves current user's userCollection details.
     - OAuth:
       - type: oauth2
       - name: Authorization_Code_PKCE
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter locale: (query) BCP47 locale code 
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: albums, artists, playlists (optional)
     - returns: RequestBuilder<UserCollectionsSingleDataDocument> 
     */
    internal class func userCollectionsMeGetWithRequestBuilder(countryCode: String, locale: String, include: [String]? = nil) -> RequestBuilder<UserCollectionsSingleDataDocument> {
        let localVariablePath = "/userCollections/me"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "countryCode": (wrappedValue: countryCode.encodeToJSON(), isExplode: true),
            "locale": (wrappedValue: locale.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserCollectionsSingleDataDocument>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
