//
// SearchSuggestionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal class SearchSuggestionsAPI {

    /**
     Get single searchSuggestion.
     
     - parameter id: (path)  
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter explicitFilter: (query) Explicit filter (optional)
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: directHits (optional)
     - returns: SearchSuggestionsSingleDataDocument
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func searchSuggestionsIdGet(id: String, countryCode: String, explicitFilter: String? = nil, include: [String]? = nil) async throws -> SearchSuggestionsSingleDataDocument {
        return try await searchSuggestionsIdGetWithRequestBuilder(id: id, countryCode: countryCode, explicitFilter: explicitFilter, include: include).execute().body
    }

    /**
     Get single searchSuggestion.
     - GET /searchSuggestions/{id}
     - Retrieves single searchSuggestion by id.
     - OAuth:
       - type: oauth2
       - name: Authorization_Code_PKCE
     - OAuth:
       - type: oauth2
       - name: Client_Credentials
     - parameter id: (path)  
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter explicitFilter: (query) Explicit filter (optional)
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: directHits (optional)
     - returns: RequestBuilder<SearchSuggestionsSingleDataDocument> 
     */
    internal class func searchSuggestionsIdGetWithRequestBuilder(id: String, countryCode: String, explicitFilter: String? = nil, include: [String]? = nil) -> RequestBuilder<SearchSuggestionsSingleDataDocument> {
        var localVariablePath = "/searchSuggestions/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "countryCode": (wrappedValue: countryCode.encodeToJSON(), isExplode: true),
            "explicitFilter": (wrappedValue: explicitFilter?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchSuggestionsSingleDataDocument>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get directHits relationship (\"to-many\").
     
     - parameter id: (path)  
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter explicitFilter: (query) Explicit filter (optional)
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: directHits (optional)
     - parameter pageCursor: (query) Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified (optional)
     - returns: SearchSuggestionsMultiDataRelationshipDocument
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func searchSuggestionsIdRelationshipsDirectHitsGet(id: String, countryCode: String, explicitFilter: String? = nil, include: [String]? = nil, pageCursor: String? = nil) async throws -> SearchSuggestionsMultiDataRelationshipDocument {
        return try await searchSuggestionsIdRelationshipsDirectHitsGetWithRequestBuilder(id: id, countryCode: countryCode, explicitFilter: explicitFilter, include: include, pageCursor: pageCursor).execute().body
    }

    /**
     Get directHits relationship (\"to-many\").
     - GET /searchSuggestions/{id}/relationships/directHits
     - Retrieves directHits relationship.
     - OAuth:
       - type: oauth2
       - name: Authorization_Code_PKCE
     - OAuth:
       - type: oauth2
       - name: Client_Credentials
     - parameter id: (path)  
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter explicitFilter: (query) Explicit filter (optional)
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: directHits (optional)
     - parameter pageCursor: (query) Server-generated cursor value pointing a certain page of items. Optional, targets first page if not specified (optional)
     - returns: RequestBuilder<SearchSuggestionsMultiDataRelationshipDocument> 
     */
    internal class func searchSuggestionsIdRelationshipsDirectHitsGetWithRequestBuilder(id: String, countryCode: String, explicitFilter: String? = nil, include: [String]? = nil, pageCursor: String? = nil) -> RequestBuilder<SearchSuggestionsMultiDataRelationshipDocument> {
        var localVariablePath = "/searchSuggestions/{id}/relationships/directHits"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "countryCode": (wrappedValue: countryCode.encodeToJSON(), isExplode: true),
            "explicitFilter": (wrappedValue: explicitFilter?.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
            "page[cursor]": (wrappedValue: pageCursor?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchSuggestionsMultiDataRelationshipDocument>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
