//
// UserPublicProfilePicksAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal class UserPublicProfilePicksAPI {

    /**
     Get all userPublicProfilePicks
     
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter locale: (query) BCP47 locale code 
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: item, userPublicProfile (optional)
     - parameter filterUserPublicProfileId: (query) Allows to filter the collection of resources based on userPublicProfile.id attribute value (optional)
     - parameter filterId: (query) Allows to filter the collection of resources based on id attribute value (optional)
     - returns: UserPublicProfilePicksMultiDataDocument
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func userPublicProfilePicksGet(countryCode: String, locale: String, include: [String]? = nil, filterUserPublicProfileId: [String]? = nil, filterId: [String]? = nil) async throws -> UserPublicProfilePicksMultiDataDocument {
        return try await userPublicProfilePicksGetWithRequestBuilder(countryCode: countryCode, locale: locale, include: include, filterUserPublicProfileId: filterUserPublicProfileId, filterId: filterId).execute().body
    }

    /**
     Get all userPublicProfilePicks
     - GET /userPublicProfilePicks
     - Retrieves all userPublicProfilePick details by available filters or without (if applicable).
     - OAuth:
       - type: oauth2
       - name: Authorization_Code_PKCE
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter locale: (query) BCP47 locale code 
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: item, userPublicProfile (optional)
     - parameter filterUserPublicProfileId: (query) Allows to filter the collection of resources based on userPublicProfile.id attribute value (optional)
     - parameter filterId: (query) Allows to filter the collection of resources based on id attribute value (optional)
     - returns: RequestBuilder<UserPublicProfilePicksMultiDataDocument> 
     */
    internal class func userPublicProfilePicksGetWithRequestBuilder(countryCode: String, locale: String, include: [String]? = nil, filterUserPublicProfileId: [String]? = nil, filterId: [String]? = nil) -> RequestBuilder<UserPublicProfilePicksMultiDataDocument> {
        let localVariablePath = "/userPublicProfilePicks"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "countryCode": (wrappedValue: countryCode.encodeToJSON(), isExplode: true),
            "locale": (wrappedValue: locale.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
            "filter[userPublicProfile.id]": (wrappedValue: filterUserPublicProfileId?.encodeToJSON(), isExplode: true),
            "filter[id]": (wrappedValue: filterId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPublicProfilePicksMultiDataDocument>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Relationship: item(read)
     
     - parameter id: (path) User profile id 
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter locale: (query) BCP47 locale code 
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: item (optional)
     - returns: UserPublicProfilePicksSingletonDataRelationshipDocument
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func userPublicProfilePicksIdRelationshipsItemGet(id: String, countryCode: String, locale: String, include: [String]? = nil) async throws -> UserPublicProfilePicksSingletonDataRelationshipDocument {
        return try await userPublicProfilePicksIdRelationshipsItemGetWithRequestBuilder(id: id, countryCode: countryCode, locale: locale, include: include).execute().body
    }

    /**
     Relationship: item(read)
     - GET /userPublicProfilePicks/{id}/relationships/item
     - Retrieves item relationship details of the related userPublicProfilePick resource.
     - OAuth:
       - type: oauth2
       - name: Authorization_Code_PKCE
     - parameter id: (path) User profile id 
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter locale: (query) BCP47 locale code 
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: item (optional)
     - returns: RequestBuilder<UserPublicProfilePicksSingletonDataRelationshipDocument> 
     */
    internal class func userPublicProfilePicksIdRelationshipsItemGetWithRequestBuilder(id: String, countryCode: String, locale: String, include: [String]? = nil) -> RequestBuilder<UserPublicProfilePicksSingletonDataRelationshipDocument> {
        var localVariablePath = "/userPublicProfilePicks/{id}/relationships/item"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "countryCode": (wrappedValue: countryCode.encodeToJSON(), isExplode: true),
            "locale": (wrappedValue: locale.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPublicProfilePicksSingletonDataRelationshipDocument>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Relationship: item (create/update/delete)
     
     - parameter updatePickRelationshipBody: (body)  (optional)
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func userPublicProfilePicksIdRelationshipsItemPatch(updatePickRelationshipBody: UpdatePickRelationshipBody? = nil) async throws {
        return try await userPublicProfilePicksIdRelationshipsItemPatchWithRequestBuilder(updatePickRelationshipBody: updatePickRelationshipBody).execute().body
    }

    /**
     Relationship: item (create/update/delete)
     - PATCH /userPublicProfilePicks/{id}/relationships/item
     - Manages item relationship details of the related userPublicProfilePick resource. Use this operation if you need to create, update or delete relationship's linkage.
     - OAuth:
       - type: oauth2
       - name: Authorization_Code_PKCE
     - parameter updatePickRelationshipBody: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    internal class func userPublicProfilePicksIdRelationshipsItemPatchWithRequestBuilder(updatePickRelationshipBody: UpdatePickRelationshipBody? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/userPublicProfilePicks/{id}/relationships/item"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updatePickRelationshipBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/vnd.api+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Relationship: userPublicProfile(read)
     
     - parameter id: (path) User picks id 
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: userPublicProfile (optional)
     - returns: UserPublicProfilePicksSingletonDataRelationshipDocument
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func userPublicProfilePicksIdRelationshipsUserPublicProfileGet(id: String, include: [String]? = nil) async throws -> UserPublicProfilePicksSingletonDataRelationshipDocument {
        return try await userPublicProfilePicksIdRelationshipsUserPublicProfileGetWithRequestBuilder(id: id, include: include).execute().body
    }

    /**
     Relationship: userPublicProfile(read)
     - GET /userPublicProfilePicks/{id}/relationships/userPublicProfile
     - Retrieves userPublicProfile relationship details of the related userPublicProfilePick resource.
     - OAuth:
       - type: oauth2
       - name: Authorization_Code_PKCE
     - parameter id: (path) User picks id 
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: userPublicProfile (optional)
     - returns: RequestBuilder<UserPublicProfilePicksSingletonDataRelationshipDocument> 
     */
    internal class func userPublicProfilePicksIdRelationshipsUserPublicProfileGetWithRequestBuilder(id: String, include: [String]? = nil) -> RequestBuilder<UserPublicProfilePicksSingletonDataRelationshipDocument> {
        var localVariablePath = "/userPublicProfilePicks/{id}/relationships/userPublicProfile"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPublicProfilePicksSingletonDataRelationshipDocument>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get current user's userPublicProfilePick data
     
     - parameter id: (path) User picks id 
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter locale: (query) BCP47 locale code 
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: item, userPublicProfile (optional)
     - returns: UserPublicProfilePicksMultiDataDocument
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func userPublicProfilePicksMeGet(id: String, countryCode: String, locale: String, include: [String]? = nil) async throws -> UserPublicProfilePicksMultiDataDocument {
        return try await userPublicProfilePicksMeGetWithRequestBuilder(id: id, countryCode: countryCode, locale: locale, include: include).execute().body
    }

    /**
     Get current user's userPublicProfilePick data
     - GET /userPublicProfilePicks/me
     - Retrieves current user's userPublicProfilePick details.
     - OAuth:
       - type: oauth2
       - name: Authorization_Code_PKCE
     - parameter id: (path) User picks id 
     - parameter countryCode: (query) ISO 3166-1 alpha-2 country code 
     - parameter locale: (query) BCP47 locale code 
     - parameter include: (query) Allows the client to customize which related resources should be returned. Available options: item, userPublicProfile (optional)
     - returns: RequestBuilder<UserPublicProfilePicksMultiDataDocument> 
     */
    internal class func userPublicProfilePicksMeGetWithRequestBuilder(id: String, countryCode: String, locale: String, include: [String]? = nil) -> RequestBuilder<UserPublicProfilePicksMultiDataDocument> {
        var localVariablePath = "/userPublicProfilePicks/me"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "countryCode": (wrappedValue: countryCode.encodeToJSON(), isExplode: true),
            "locale": (wrappedValue: locale.encodeToJSON(), isExplode: true),
            "include": (wrappedValue: include?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPublicProfilePicksMultiDataDocument>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
