//
// TrackManifestsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal class TrackManifestsAPI {

    /**
     Get single trackManifest.
     
     - parameter id: (path)  
     - parameter manifestType: (query)  
     - parameter formats: (query)  
     - parameter uriScheme: (query)  
     - parameter usage: (query)  
     - parameter adaptive: (query)  
     - returns: TrackManifestsSingleDataDocument
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func trackManifestsIdGet(id: String, manifestType: String, formats: String, uriScheme: String, usage: String, adaptive: String) async throws -> TrackManifestsSingleDataDocument {
        return try await trackManifestsIdGetWithRequestBuilder(id: id, manifestType: manifestType, formats: formats, uriScheme: uriScheme, usage: usage, adaptive: adaptive).execute().body
    }

    /**
     Get single trackManifest.
     - GET /trackManifests/{id}
     - Retrieves single trackManifest by id.
     - OAuth:
       - type: oauth2
       - name: Authorization_Code_PKCE
     - OAuth:
       - type: oauth2
       - name: Client_Credentials
     - parameter id: (path)  
     - parameter manifestType: (query)  
     - parameter formats: (query)  
     - parameter uriScheme: (query)  
     - parameter usage: (query)  
     - parameter adaptive: (query)  
     - returns: RequestBuilder<TrackManifestsSingleDataDocument> 
     */
    internal class func trackManifestsIdGetWithRequestBuilder(id: String, manifestType: String, formats: String, uriScheme: String, usage: String, adaptive: String) -> RequestBuilder<TrackManifestsSingleDataDocument> {
        var localVariablePath = "/trackManifests/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "manifestType": (wrappedValue: manifestType.encodeToJSON(), isExplode: true),
            "formats": (wrappedValue: formats.encodeToJSON(), isExplode: true),
            "uriScheme": (wrappedValue: uriScheme.encodeToJSON(), isExplode: true),
            "usage": (wrappedValue: usage.encodeToJSON(), isExplode: true),
            "adaptive": (wrappedValue: adaptive.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TrackManifestsSingleDataDocument>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
