{{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} enum {{classname}}: {{#useVapor}}Content{{/useVapor}}{{^useVapor}}Codable, JSONEncodable{{#vendorExtensions.x-swift-hashable}}, Hashable{{/vendorExtensions.x-swift-hashable}}{{/useVapor}} {
    {{#oneOf}}
    case {{#lambda.camelcase}}{{.}}{{/lambda.camelcase}}({{.}})
    {{/oneOf}}
    {{#oneOfUnknownDefaultCase}}
    case unknownDefaultOpenApi
    {{/oneOfUnknownDefaultCase}}

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        {{#oneOf}}
        case .{{#lambda.camelcase}}{{.}}{{/lambda.camelcase}}(let value):
            try container.encode(value)
        {{/oneOf}}
        {{#oneOfUnknownDefaultCase}}
        case unknownDefaultOpenApi(let type):
            try container.encodeNil()
        {{/oneOfUnknownDefaultCase}}
        }
    }
    
    {{#discriminator}}
    {{#propertyName}}
    private enum CodingKeys: String, CodingKey {
        case {{propertyName}}
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        let type = try container.decode(String.self, forKey: .{{propertyName}})

        switch type {
        {{#mappedModels}}
        case "{{mappingName}}":
            let value = try {{modelName}}(from: decoder)
            self = .{{#lambda.camelcase}}{{modelName}}{{/lambda.camelcase}}(value)
        {{/mappedModels}}
        default:
            throw DecodingError.dataCorruptedError(forKey: .{{propertyName}}, in: container, debugDescription: "Unknown type: \\(type)")
        }
    }
    {{/propertyName}}
    {{^propertyName}}
    public init(from decoder: Decoder) throws {
        {{#oneOf}}
        if let value = try? {{.}}(from: decoder) {
            self = .{{#lambda.camelcase}}{{.}}{{/lambda.camelcase}}(value)
            return
        }
        {{/oneOf}}
        
        let context = DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Unable to decode {{classname}}")
        throw DecodingError.dataCorrupted(context)
    }
    {{/propertyName}}
    {{/discriminator}}
    {{^discriminator}}
    public init(from decoder: Decoder) throws {
        {{#oneOf}}
        if let value = try? {{.}}(from: decoder) {
            self = .{{#lambda.camelcase}}{{.}}{{/lambda.camelcase}}(value)
            return
        }
        {{/oneOf}}
        
        let context = DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Unable to decode {{classname}}")
        throw DecodingError.dataCorrupted(context)
    }
    {{/discriminator}}
}

{{#vendorExtensions.x-swift-identifiable}}@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension {{classname}}: Identifiable {
    public var id: String {
        switch self {
        {{#oneOf}}
        case .{{#lambda.camelcase}}{{.}}{{/lambda.camelcase}}(let value): return value.id
        {{/oneOf}}
        {{#oneOfUnknownDefaultCase}}
        case .unknownDefaultOpenApi: return "unknown"
        {{/oneOfUnknownDefaultCase}}
        }
    }
}{{/vendorExtensions.x-swift-identifiable}}
